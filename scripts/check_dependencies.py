#!/usr/bin/env python3
"""
Script de v√©rification des d√©pendances V√©loMAG
Teste que tous les modules requis sont install√©s
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour importer les modules du projet
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

def test_imports():
    """Teste l'importation de tous les modules requis"""
    print("üß™ Test des d√©pendances V√©loMAG...")
    print("=" * 40)
    
    modules_to_test = [
        ("requests", "Requ√™tes HTTP"),
        ("pandas", "Manipulation de donn√©es"),
        ("numpy", "Calculs num√©riques"),
        ("matplotlib", "Graphiques statiques"),
        ("seaborn", "Visualisations statistiques"),
        ("plotly", "Graphiques interactifs"),
        ("folium", "Cartes interactives"),
        ("json", "Parsing JSON"),
        ("datetime", "Gestion des dates"),
        ("urllib.parse", "Parsing d'URLs"),
    ]
    
    failed_imports = []
    
    for module_name, description in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name:<15} - {description}")
        except ImportError as e:
            print(f"‚ùå {module_name:<15} - {description} (ERREUR: {e})")
            failed_imports.append(module_name)
    
    print("\n" + "=" * 40)
    
    if failed_imports:
        print(f"‚ùå {len(failed_imports)} module(s) manquant(s): {', '.join(failed_imports)}")
        print("\nüîß Pour corriger, installez les d√©pendances manquantes :")
        print("pip install -r requirements.txt")
        return False
    else:
        print("‚úÖ Tous les modules sont correctement install√©s!")
        
        # Test d'importation des modules sp√©cifiques du projet
        print("\nüß™ Test des modules du projet...")
        try:
            from main import VelomaggAnalyzer
            print("‚úÖ main.VelomaggAnalyzer")
        except ImportError as e:
            print(f"‚ùå main.VelomaggAnalyzer (ERREUR: {e})")
            return False
            
        try:
            from advanced_analytics import AdvancedAnalytics
            print("‚úÖ advanced_analytics.AdvancedAnalytics")
        except ImportError as e:
            print(f"‚ùå advanced_analytics.AdvancedAnalytics (ERREUR: {e})")
            return False
            
        print("\nüéâ Toutes les d√©pendances sont OK!")
        return True

def test_api_connectivity():
    """Teste la connectivit√© √† l'API V√©loMAG"""
    print("\nüåê Test de connectivit√© API...")
    try:
        import requests
        response = requests.get("https://portail-api-data.montpellier3m.fr/bikestation", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API V√©loMAG accessible - {len(data)} stations disponibles")
            return True
        else:
            print(f"‚ö†Ô∏è API V√©loMAG r√©pond avec le code {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connectivit√© API: {e}")
        return False

if __name__ == "__main__":
    print("üö¥‚Äç‚ôÇÔ∏è V√©loMAG Stats - V√©rification des d√©pendances")
    print("=" * 50)
    
    # Test des imports
    imports_ok = test_imports()
    
    if imports_ok:
        # Test de l'API
        api_ok = test_api_connectivity()
        
        if api_ok:
            print("\nüéØ Syst√®me pr√™t pour l'analyse V√©loMAG!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è Probl√®me de connectivit√© API mais modules OK")
            sys.exit(0)
    else:
        print("\n‚ùå Des d√©pendances sont manquantes")
        sys.exit(1)
